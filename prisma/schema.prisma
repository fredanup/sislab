// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  // provider = "sqlite"
  // url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

enum PosterSource {
  RAW
  GITHUB
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/v11/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

model Laboratory {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model Presentation {
  id           String    @id @default(cuid())
  presentation String
  products     Product[]
}

model Product {
  id             String        @id @default(cuid())
  name           String
  quantity       String
  price          Float
  laboratoryId   String?
  Laboratory     Laboratory?   @relation(fields: [laboratoryId], references: [id])
  presentationId String?
  Presentation   Presentation? @relation(fields: [presentationId], references: [id])
  examples       Example[]
  Stocks         Stock[]
}

model Sale {
  id         String    @id @default(cuid())
  buyerId    String
  discount   Float
  finalPrice Float
  saleDate   DateTime  @default(now())
  examples   Example[]
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
}

model Example {
  id          String     @id
  Product     Product    @relation(fields: [productId], references: [id])
  productId   String
  Sale        Sale?      @relation(fields: [saleId], references: [id])
  saleId      String?
  Branch      Branch     @relation(fields: [branchId], references: [id])
  branchId    String
  Movements   Movement[]
  isAvailable Boolean
}

model Movement {
  id            String   @id @default(cuid())
  moveType      String
  moveDate      DateTime @default(now())
  moveStatus    String
  Provenance    Branch?  @relation(name: "Provenance", fields: [provenanceId], references: [id])
  provenanceId  String?
  Destination   Branch?  @relation(name: "Destination", fields: [destinationId], references: [id])
  destinationId String?
  Example       Example? @relation(fields: [exampleId], references: [id])
  exampleId     String?
}

//Esta tabla es necesaria para controlar el stock de cada sucursal 
model Stock {
  id        String   @id @default(cuid())
  stock     Int
  Branch    Branch?  @relation(fields: [branchId], references: [id])
  branchId  String?
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Branch {
  id          String     @id @default(cuid())
  name        String
  address     String?
  users       User[]
  provenance  Movement[] @relation(name: "Provenance")
  destination Movement[] @relation(name: "Destination")
  Examples    Example[]
  Stocks      Stock[]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  lastName      String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  //Role de usuario: Supervisor, administrador, vendedor
  role          String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Branch    Branch?  @relation(fields: [branchId], references: [id])
  branchId  String?
  sales     Sale[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
